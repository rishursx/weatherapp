{"version":3,"sources":["container/WeatherContainer/WeatherContainer.module.css","component/Header/Header.js","component/WeatherForecastChart/WeatherForecastChart.js","container/WeatherContainer/WeatherContainer.js","API_DATA/API_DATA.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","AppBar","Typography","variant","weatherForecastChart","props","state","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","forecastData","forecastday","map","day","maxtemp_c","mintemp_c","avgtemp_c","WeatherContainer","useState","current_temperature_celsius","current_condition_icon","current_conditon_text","current_location","current_temperature_feels_like","selected_unit","current_humidity","forecast_data","newSearchLocation","weatherData","setWeatherData","useEffect","axios","get","then","response","console","log","current","temp_c","location","name","country","condition","icon","current_condition_text","text","feelslike_c","humidity","forecast","forecastChart","WeatherForecastChart","className","classes","mainContainer","searchBar","TextField","placeholder","onChange","event","setTimeout","target","value","currentWeatherPane","extraInfo","src","alt","extraInfoSide","forecastGraph","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64b23214.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"WeatherContainer_mainContainer__-QQKV\",\"searchBar\":\"WeatherContainer_searchBar__UPkXz\",\"currentWeatherPane\":\"WeatherContainer_currentWeatherPane__31Jvg\",\"extraInfo\":\"WeatherContainer_extraInfo__1xhvs\",\"extraInfoSide\":\"WeatherContainer_extraInfoSide__1qoV2\"};","import React from \"react\";\nimport { AppBar, Typography } from \"@material-ui/core\";\n\nconst Header = () => (\n  <AppBar>\n    <Typography variant=\"subtitle1\">TheWeatherApp</Typography>\n  </AppBar>\n);\nexport default Header;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst weatherForecastChart = (props) => {\n  const state = {\n    labels: [\"today\", \"tommorrow\", \"foremorrow\"],\n    datasets: [\n      {\n        label: \"minimum temperature\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"red\",\n        borderColor: \"yellow\",\n        borderWidth: 2,\n        data: props.forecastData.forecastday.map((day) => {\n          return day.day.maxtemp_c;\n        }),\n      },\n      {\n        label: \"maximum temperature\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"yellow\",\n        borderColor: \"red\",\n        borderWidth: 2,\n        data: props.forecastData.forecastday.map((day) => {\n          return day.day.mintemp_c;\n        }),\n      },\n      {\n        label: \"average temperature\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"blue\",\n        borderColor: \"aqua\",\n        borderWidth: 2,\n        data: props.forecastData.forecastday.map((day) => {\n          return day.day.avgtemp_c;\n        }),\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Line data={state} />\n    </div>\n  );\n};\n\nexport default weatherForecastChart;\n","import React, { useEffect, useState } from \"react\";\nimport { API_KEY, URL } from \"../../API_DATA/API_DATA\";\nimport axios from \"axios\";\nimport classes from \"./WeatherContainer.module.css\";\nimport Header from \"../../component/Header/Header\";\nimport { TextField, Typography } from \"@material-ui/core\";\nimport WeatherForecastChart from \"../../component/WeatherForecastChart/WeatherForecastChart\";\n\nconst WeatherContainer = () => {\n  const [weatherData, setWeatherData] = useState({\n    current_temperature_celsius: \"\",\n    current_condition_icon: \"\",\n    current_conditon_text: \"\",\n    current_location: \"\",\n    current_temperature_feels_like: \"\",\n    selected_unit: \"Celcius\",\n    current_humidity: \"\",\n    forecast_data: {\n      forecastday: [],\n    },\n    newSearchLocation: \"Kanpur\",\n  });\n\n  useEffect(() => {\n    axios\n      .get(`${URL}?key=${API_KEY}&q=${weatherData.newSearchLocation}&days=5`)\n      .then((response) => {\n        console.log(response);\n        setWeatherData({\n          current_temperature_celsius: response.data.current.temp_c,\n          current_location: `${response.data.location.name}, ${response.data.location.country}`,\n          current_condition_icon: response.data.current.condition.icon,\n          current_condition_text: response.data.current.condition.text,\n          current_temperature_feels_like: response.data.current.feelslike_c,\n          current_humidity: response.data.current.humidity,\n          forecast_data: response.data.forecast,\n          forecastChart: (\n            <WeatherForecastChart forecastData={response.data.forecast} />\n          ),\n          newSearchLocation: response.data.location.name,\n        });\n      });\n  }, [weatherData.newSearchLocation]);\n\n  return (\n    <div>\n      <Header />\n      <div className={classes.mainContainer}>\n        <div className={classes.searchBar}>\n          <TextField\n            variant=\"outlined\"\n            label=\"Location\"\n            placeholder=\"Enter City Name/ Zip Code\"\n            onChange={(event) => {\n              setTimeout(() => {\n                setWeatherData({\n                  ...weatherData,\n                  newSearchLocation: event.target.value,\n                });\n              }, 1000);\n            }}\n          />\n        </div>\n        <div className={classes.currentWeatherPane}>\n          <Typography variant=\"h1\">\n            {weatherData.current_temperature_celsius}°\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            {weatherData.current_location}\n          </Typography>\n        </div>\n        <div className={classes.extraInfo}>\n          <div>\n            <img\n              src={weatherData.current_condition_icon}\n              alt={weatherData.current_condition_text}\n            />\n            <Typography variant=\"subtitle1\">\n              {weatherData.current_condition_text}\n            </Typography>\n          </div>\n          <div className={classes.extraInfoSide}>\n            <Typography variant=\"h6\">\n              Feels Like{\" \"}\n              <strong>{weatherData.current_temperature_feels_like}°</strong>\n            </Typography>\n            <Typography variant=\"h6\">\n              Humidity <strong>{weatherData.current_humidity}%</strong>\n            </Typography>\n          </div>\n        </div>\n        <div className={classes.forecastGraph}>{weatherData.forecastChart}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherContainer;\n","export const API_KEY = `a660ff82a0094133a1f130534200610`;\nexport const URL = `https://api.weatherapi.com/v1/`;\nexport const FORECAST = `forecast.json`;\nexport const SEARCH = `search.json`;\n","import \"./App.css\";\nimport WeatherContainer from \"./container/WeatherContainer/WeatherContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}